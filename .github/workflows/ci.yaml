name: ci

on:
  push:
    paths:
      - 'agent/pyproject.toml'
  pull_request:
    paths:
      - 'agent/pyproject.toml'
  workflow_dispatch:

jobs:
  test-agent:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Install Node.js dependencies
        run: npm install
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Bootstrap poetry
        run: curl -sSL https://install.python-poetry.org | python - -y --version 1.8.3
      - name: Install dependencies
        run: poetry install
        working-directory: agent
      - name: Test
        run: poetry run pytest -rP .
        working-directory: agent
        env:
          VELLUM_API_KEY: ${{ secrets.VELLUM_API_KEY }}
  publish-agent:
    runs-on: ubuntu-latest
    needs: test-agent
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Bootstrap poetry
        run: curl -sSL https://install.python-poetry.org | python - -y --version 1.8.3
      - name: Install dependencies
        run: poetry install
        working-directory: agent
      - name: Build package
        run: poetry build
        working-directory: agent
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(sed -n '3p' agent/pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js for browser service
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Build browser service
        run: |
          cd browser
          npm install
          npm run build
          cd ..
      - name: Create complete agent package
        run: |
          mkdir -p vargasjr_dev_agent-${{ steps.get_version.outputs.version }}
          cd vargasjr_dev_agent-${{ steps.get_version.outputs.version }}
          tar -xzf ../agent/dist/vargasjr_dev_agent-${{ steps.get_version.outputs.version }}.tar.gz --strip-components=1
          cp -r ../browser ./browser
          cd ..
          tar -czf vargasjr_dev_agent-${{ steps.get_version.outputs.version }}.tar.gz vargasjr_dev_agent-${{ steps.get_version.outputs.version }}
      - name: Publish package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && format('dist-pr-{0}', github.event.number) || 'dist' }}
          path: vargasjr_dev_agent-${{ steps.get_version.outputs.version }}.tar.gz
          retention-days: 5
      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: vargasjr_dev_agent-${{ steps.get_version.outputs.version }}.tar.gz
          tag_name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
