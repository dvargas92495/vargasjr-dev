name: ci

on:
  push:
    paths:
      - 'vellum/pyproject.toml'
      - 'package.json'
      - 'browser/**'
      - 'worker/**'
      - 'run_agent.sh'
  pull_request:
    paths:
      - 'vellum/pyproject.toml'
      - 'browser/**'
      - 'worker/**'
      - 'scripts/**'
      - 'app/**'
      - 'components/**'
      - 'db/**'
      - 'eslint.config.mjs'
      - 'package.json'
      - '.github/workflows/ci.yaml'
      - 'run_agent.sh'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Install Node.js dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint
  publish-agent:
    runs-on: ubuntu-latest
    needs: [lint]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Bootstrap poetry
        run: curl -sSL https://install.python-poetry.org | python - -y --version 1.8.3
      - name: Install dependencies
        run: poetry install
        working-directory: vellum
      - name: Build package
        run: poetry build
        working-directory: vellum
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(sed -n '3p' vellum/pyproject.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Set up Node.js for browser service
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Build browser service
        run: npm run browser:build
      - name: Build worker service
        run: npm run agent:build
      - name: Create complete agent package
        run: |
          mkdir -p vargasjr_dev_agent-${{ steps.get_version.outputs.version }}
          cd vargasjr_dev_agent-${{ steps.get_version.outputs.version }}
          tar -xzf ../vellum/dist/vargasjr_dev_agent-${{ steps.get_version.outputs.version }}.tar.gz --strip-components=1
          cp -r ../browser ./browser
          cp -r ../scripts ./scripts
          cp -r ../worker ./worker
          cp ../package.json ./package.json
          cd ..
          tar -czf vargasjr_dev_agent-${{ steps.get_version.outputs.version }}.tar.gz vargasjr_dev_agent-${{ steps.get_version.outputs.version }}
      - name: Publish package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && format('dist-pr-{0}', github.event.number) || 'dist' }}
          path: vargasjr_dev_agent-${{ steps.get_version.outputs.version }}.tar.gz
          retention-days: 5
      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: vargasjr_dev_agent-${{ steps.get_version.outputs.version }}.tar.gz
          tag_name: v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

  create-preview-agent:
    runs-on: ubuntu-latest
    needs: [lint, publish-agent]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Install dependencies
        run: npm install
      - name: Create preview agent
        run: npm run create-agent -- pr-${{ github.event.number }}
        env:
          VELLUM_API_KEY: ${{ secrets.VELLUM_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
